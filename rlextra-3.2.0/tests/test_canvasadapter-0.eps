%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 242 110
%%Title: ()
%%DocumentProcessColors: black
%%DocumentFonts: Helvetica
%%+ Helvetica-Bold

%%CreationDate: (03/Jun/2015) (13:23:26 GMT)
%%Creator: ReportLab+renderPS_SEP 1.01
%%For: () ()
%%Extensions: CMYK
%%EndComments
%%BeginProlog

%%BeginResource: procset sep_ops 1.03 0
%%Title: (Separation Procs)
%%Version: 1.03 0
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer { % helper proc called by customcolorimage
	0 1 2 index length 1 sub {
	dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	}for
}bdef

/addprocs { % {proc1} {proc2} addprocs {{proc1}exec {proc2} exec}
	[ 3 1 roll
	/exec load
	dup 3 1 roll
	] cvx
} bdef

/L1? {
	/languagelevel where {
	pop languagelevel 2 lt
	}{
		true
	} ifelse
} bdef

/colorexists { % tests to see if printing on color device
	statusdict /processcolors known {
		statusdict /processcolors get exec
	}{ % processcolors not present
		/deviceinfo where { % check for dps environment
			pop deviceinfo /Colors known {
				deviceinfo /Colors get % get color value from DPS
				statusdict /processcolors {% add processcolors entry
					deviceinfo /Colors known {
						deviceinfo /Colors get
						}{
					1
				} ifelse
			} put
		}{
		1
	} ifelse
}{ % not in dps environment, assume monochrome
1
} ifelse
} ifelse
1 gt % return true for color devices, false for B&W
} bdef
/MakeReadOnlyArray { % size => [array]
/packedarray where {
pop packedarray
}{
array astore readonly
} ifelse
} bdef
/findcmykcustomcolor where {
pop
}{
/findcmykcustomcolor {% c m y k name findcmykcustomcolor array
5 MakeReadOnlyArray
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {% boolean setoverprint -
pop
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor { % array tint setcustomcolor -
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor { % customcolorarray tint
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
% initialize variables to avoid unintentional early binding
/ik 0 def /iy 0 def /im 0 def /ic 0 def
/imagetint {% converts cmyk to grayscale equiv w/red book formula
% called by setcmykcolor and customcolorimage procs.
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt{pop 1}if
} bdef
/setcmykcolor where {
pop
}{
% setcmykcolor not supported, call setgray instead
/setcmykcolor { % c m y k setcmykcolor --
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{ % w h bps matrix proc array
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll{im mul im sub 1 add} addprocs
4 1 roll{ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
}if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{ % non-color device
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef
/tint imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
}ifelse
grestore
} bdef
}{ % Level 2 environment
/customcolorimage { % w h bps matrix proc array
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray {
1 exch sub dup dup dup setcmykcolor
} bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK
{dup dup dup}] setcolorspace 1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where {
pop
}{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource


%%EndProlog
%%BeginSetup
sep_ops begin
50 dict begin % temp dict for variable definitions
%%EndSetup

/pgsave save def
/m {moveto} def
/l {lineto} def
/c {curveto} bind def


/RE { %def
  findfont begin
  currentdict dup length dict begin
 { %forall
   1 index /FID ne { def } { pop pop } ifelse
 } forall
 /FontName exch def dup length 0 ne { %if
   /Encoding Encoding 256 array copy def
   0 exch { %forall
     dup type /nametype eq { %ifelse
       Encoding 2 index 2 index put
       pop 1 add
     }{ %else
       exch pop
     } ifelse
   } forall
 } if pop
  currentdict dup end end
  /FontName get exch definefont pop
} bind def

/WinAnsiEncoding [
  39/quotesingle 96/grave 128/euro 130/quotesinglbase/florin/quotedblbase
  /ellipsis/dagger/daggerdbl/circumflex/perthousand
  /Scaron/guilsinglleft/OE 145/quoteleft/quoteright
  /quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/dotlessi
  159/Ydieresis 164/currency 166/brokenbar 168/dieresis/copyright
  /ordfeminine 172/logicalnot 174/registered/macron/ring
  177/plusminus/twosuperior/threesuperior/acute/mu
  183/periodcentered/cedilla/onesuperior/ordmasculine
  188/onequarter/onehalf/threequarters 192/Agrave/Aacute
  /Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
  /Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute
  /Ocircumflex/Otilde/Odieresis/multiply/Oslash
  /Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
  /germandbls/agrave/aacute/acircumflex/atilde/adieresis
  /aring/ae/ccedilla/egrave/eacute/ecircumflex
  /edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde
  /odieresis/divide/oslash/ugrave/uacute/ucircumflex
  /udieresis/yacute/thorn/ydieresis
] def

WinAnsiEncoding /Helvetica /Helvetica RE
WinAnsiEncoding /Helvetica-Bold /Helvetica-Bold RE

0 0 0 1 setcmykcolor false setoverprint
2 setlinecap
0 setlinejoin
1 setlinewidth
gsave
1 1 translate
(Helvetica) findfont 10 scalefont setfont
6 95 m (ABCDEF) show 
102.82 95 m (GHIJKL) show 
6 65 m (next to a Para) show 
gsave
102.82 63 translate
gsave
(Helvetica-Bold) findfont 10 scalefont setfont
0 14 m (Hello) show 
(Helvetica) findfont 10 scalefont setfont
0 .501961 0 setrgbcolor
24.45 14 m (World) show 
0 0 0 1 setcmykcolor false setoverprint
50.56 14 m (! This is the end!) show 
0 2 m (This is a) show 
(Helvetica) findfont 8 scalefont setfont
1 0 0 setrgbcolor
37.23 -3 m (i ) show 
(Helvetica) findfont 10 scalefont setfont
0 0 0 1 setcmykcolor false setoverprint
41.23 2 m (subscript.) show 
grestore
grestore
6 23 m (next to a TABLE) show 
gsave
102.82 21 translate
.827451 .827451 .827451 setrgbcolor
0 18 m
81.23 18 l
81.23 36 l
0 36 l
closepath
eofill
0 0 0 1 setcmykcolor false setoverprint
23.56 23 m (Hello World) show 
6 5 m (1) show 
69.67 5 m (2) show 
gsave
1 setlinecap
1 setlinejoin
0 0 1 setrgbcolor
0 36 m 81.23 36 l stroke
0 0 m 81.23 0 l stroke
0 0 m 0 36 l stroke
81.23 0 m 81.23 36 l stroke
0 18 m 81.23 18 l stroke
17.56 0 m 17.56 36 l stroke
grestore
grestore
0 0 0 1 setcmykcolor false setoverprint
6 5 m (1) show 
102.82 5 m (2) show 
gsave
1 setlinecap
1 setlinejoin
1 0 0 setrgbcolor
0.6 setlinewidth
0 108 m 240.82 108 l stroke
0 0 m 240.82 0 l stroke
0 0 m 0 108 l stroke
240.82 0 m 240.82 108 l stroke
0 90 m 240.82 90 l stroke
0 60 m 240.82 60 l stroke
0 18 m 240.82 18 l stroke
96.82 0 m 96.82 108 l stroke
grestore

grestore
pgsave restore
showpage
%%Trailer
end % temp dictionary
end % sep_ops
%%EOF
